plugins {
    id 'com.android.application' version '8.7.2'
    //id 'com.android.library' version '8.7.0' apply false
    id 'org.jetbrains.kotlin.android' version '2.0.20'
    id 'org.jetbrains.kotlin.kapt' version '2.1.0'
}


/**
 * Locate (and possibly download) a JDK used to build your kotlin
 * source code. This also acts as a default for sourceCompatibility,
 * targetCompatibility and jvmTarget. Note that this does not affect which JDK
 * is used to run the Gradle build itself, and does not need to take into
 * account the JDK version required by Gradle plugins (such as the
 * Android Gradle Plugin)
 */
kotlin {
    jvmToolchain 11
}

/**
 * The android block is where you configure all your Android-specific
 * build options.
 */

android {

    /**
     * The app's namespace. Used primarily to access app resources.
     */

    namespace 'com.google.android.stardroid'

    /**
     * compileSdk specifies the Android API level Gradle should use to
     * compile your app. This means your app can use the API features included in
     * this API level and lower.
     */

    compileSdk 35

    /**
     * The defaultConfig block encapsulates default settings and entries for all
     * build variants and can override some attributes in main/AndroidManifest.xml
     * dynamically from the build system. You can configure product flavors to override
     * these values for different versions of your app.
     */

    defaultConfig {
        // Uniquely identifies the package for publishing.
        applicationId 'com.google.android.stardroid'
        minSdk 26
        targetSdk 34
        versionCode 1552
        versionName "1.10.4"
    }

    /**
     * The buildTypes block is where you can configure multiple build types.
     * By default, the build system defines two build types: debug and release. The
     * debug build type is not explicitly shown in the default build configuration,
     * but it includes debugging tools and is signed with the debug key. The release
     * build type applies ProGuard settings and is not signed by default.
     */

    signingConfigs {
        release {
            if (project.file('no-checkin.properties').exists()) {
                Properties properties = new Properties()
                // Sky Map devs should create this file with the signing passwords
                properties.load(project.file('no-checkin.properties').newDataInputStream())
                storeFile file("stardroid-release-key.keystore")
                storePassword properties.getProperty('store-pwd')
                keyPassword properties.getProperty('key-pwd')
                keyAlias "stardroid"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
            if (file('no-checkin.properties').exists()) {
                signingConfig signingConfigs.release
                Properties properties = new Properties()
                // Sky Map devs should create this file with the Google Analytics key
                properties.load(project.file('no-checkin.properties').newDataInputStream())
                def analyticsKey = properties.getProperty('analytics-key')
                buildConfigField 'String', 'GOOGLE_ANALYTICS_CODE', analyticsKey
            }
        }
    }



    /**
     * The productFlavors block is where you can configure multiple product flavors.
     * This lets you create different versions of your app that can
     * override the defaultConfig block with their own settings. Product flavors
     * are optional, and the build system does not create them by default.
     *
     * This example creates a free and paid product flavor. Each product flavor
     * then specifies its own application ID, so that they can exist on the Google
     * Play Store or an Android device simultaneously.
     *
     * If you declare product flavors, you must also declare flavor dimensions
     * and assign each flavor to a flavor dimension.
     */

    flavorDimensions = ["sourciness"]
    productFlavors {
        // includes gms Google services
        gms {
            resValue "string", "analytics_enabled", "true"
            dimension "sourciness"
        }

        // uses only open source software
        fdroid {
            resValue "string", "analytics_enabled", "false"
            dimension "sourciness"
        }
    }

    /**
     * To override source and target compatibility (if different from the
     * tool chain JDK version), add the following. All of these
     * default to the same value as kotlin.jvmToolchain. If you're using the
     * same version for these values and kotlin.jvmToolchain, you can
     * remove these blocks.
     */
    //compileOptions {
    //    sourceCompatibility JavaVersion.VERSION_11
    //    targetCompatibility JavaVersion.VERSION_11
    //}
    //kotlinOptions {
    //    jvmTarget = '11'
    //}
}

/**
 * The dependencies block in the module-level build configuration file
 * specifies dependencies required to build only the module itself.
 * To learn more, go to Add build dependencies.
 */

dependencies {

    implementation project(path: ':datamodel')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

// Android support
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.preference:preference:1.2.1'
    implementation "androidx.core:core-ktx:1.15.0"

// Third-party
    implementation 'com.google.guava:guava:32.0.1-jre'
    def dagger_version = "2.48"
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    // For annotations not in Android but needed by Dagger
    implementation 'javax.annotation:jsr250-api:1.0'
    // Lite version for Android - it's lighter (obviously) but also doesn't use reflection
    // which can cause no end of problems with minifiers like proguard.
    implementation 'com.google.protobuf:protobuf-javalite:3.13.0'

// Flavor
    gmsImplementation 'com.google.android.gms:play-services-analytics:18.1.1'
    gmsImplementation 'com.google.android.gms:play-services-location:21.3.0'
    gmsImplementation 'com.google.firebase:firebase-analytics:22.1.2'

// Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation 'org.robolectric:robolectric:4.4'
    testImplementation 'org.easymock:easymock:2.5.2'
    testImplementation 'com.google.truth:truth:1.0.1'
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'org.easymock:easymock:2.5.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test:runner:1.6.2'
    androidTestImplementation 'androidx.test:rules:1.6.1'
    // Optional -- Hamcrest library
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    // Optional -- UI testing with Espresso
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    // Optional -- UI testing with UI Automator
    // androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
}

android.buildFeatures.buildConfig true

/*
dependencies {
    implementation project(":lib")
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}


plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
}
android.buildFeatures.buildConfig true
android {
    compileSdkVersion 35

    defaultConfig {
        applicationId "com.google.android.stardroid"
        minSdkVersion 26
        targetSdkVersion 34
        versionCode 1552
        versionName "1.10.4"
        buildConfigField 'String', 'GOOGLE_ANALYTICS_CODE', '""'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
            if (project.file('no-checkin.properties').exists()) {
                Properties properties = new Properties()
                // Sky Map devs should create this file with the signing passwords
                properties.load(project.file('no-checkin.properties').newDataInputStream())
                storeFile file("stardroid-release-key.keystore")
                storePassword properties.getProperty('store-pwd')
                keyPassword properties.getProperty('key-pwd')
                keyAlias "stardroid"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
            if (file('no-checkin.properties').exists()) {
                signingConfig signingConfigs.release
                Properties properties = new Properties()
                // Sky Map devs should create this file with the Google Analytics key
                properties.load(project.file('no-checkin.properties').newDataInputStream())
                def analyticsKey = properties.getProperty('analytics-key')
                buildConfigField 'String', 'GOOGLE_ANALYTICS_CODE', analyticsKey
            }
        }
    }


    // This enables long timeouts required on slow environments, e.g. Travis

    testOptions {
        animationsDisabled = true
    }

    flavorDimensions "default"
    productFlavors {
        // includes gms Google services
        gms {
            resValue "string", "analytics_enabled", "true"
        }

        // uses only open source software
        fdroid {
            resValue "string", "analytics_enabled", "false"
        }
    }
    installation {
        //installOptions '-d', '-t'
        //timeOutInMs '10 * 60 * 1000'
    }
    lint {
        abortOnError false
    }
}

dependencies {
    implementation project(path: ':datamodel')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

// Android support
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.preference:preference:1.2.1'
    implementation "androidx.core:core-ktx:1.15.0"

// Third-party
    implementation 'com.google.guava:guava:30.1.1-jre'
    def dagger_version = "2.40"
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    // For annotations not in Android but needed by Dagger
    implementation 'javax.annotation:jsr250-api:1.0'
    // Lite version for Android - it's lighter (obviously) but also doesn't use reflection
    // which can cause no end of problems with minifiers like proguard.
    implementation 'com.google.protobuf:protobuf-javalite:3.13.0'

// Flavor
    gmsImplementation 'com.google.android.gms:play-services-analytics:18.1.1'
    gmsImplementation 'com.google.android.gms:play-services-location:21.3.0'
    gmsImplementation 'com.google.firebase:firebase-analytics:22.1.2'

// Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation 'org.robolectric:robolectric:4.4'
    testImplementation 'org.easymock:easymock:2.5.2'
    testImplementation 'com.google.truth:truth:1.0.1'
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'org.easymock:easymock:2.5.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test:runner:1.6.2'
    androidTestImplementation 'androidx.test:rules:1.6.1'
    // Optional -- Hamcrest library
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    // Optional -- UI testing with Espresso
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    // Optional -- UI testing with UI Automator
    // androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
}
*/